{"version":3,"sources":["assets/mtv_logo_yellow.png","assets/mtv_logo_pink.png","reducers/index.js","reducers/triviaDataReducer.js","reducers/correctQuestionsReducer.js","reducers/incorrectQuestionsReducer.js","reducers/userNameReducer.js","reducers/difficultyReducer.js","Containers/Intro/Intro.js","apiCalls.js","actions/index.js","Containers/Header/Header.js","Containers/Result/Result.js","Components/Response/Response.js","Containers/Round/Round.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","rootReducer","combineReducers","triviaData","state","action","type","correctQuestions","question","incorrectQuestions","userName","name","difficulty","Intro","props","startGame","clearCorrectQuestions","clearIncorrectQuestions","storeUserName","storeDifficulty","difficultyDropBox","getTriviaData","fetch","then","response","ok","Error","json","unstructuredData","restructureData","restructuredData","saveTriviaDataToStore","createAllAnswers","correctAnswer","incorrectAnswers","allAnswers","shuffleAnswers","a","j","x","i","length","Math","floor","random","data","results","map","q","correct_answer","incorrect_answers","cleanData","all_answers","answer","your_answer","includes","split","join","saveUserNameToStore","saveDifficultyToStore","updateDropBoxState","setState","updateState","e","target","value","onSubmit","preventDefault","formCompleted","id","this","to","pathname","src","logo","alt","required","maxLength","placeholder","onChange","onClick","Component","connect","dispatch","saveTriviaData","saveDifficulty","correct","incorrect","toUpperCase","username","right","wrong","missedQuestions","key","className","Response","text","Round","updateSelectedAnswer","selectedAnswer","submitAnswer","counter","addToCorrectQuestions","rightORwrong","resetForNextRound","addToIncorrectQuestions","errorMessage","setTimeout","displayRightOrWrong","positiveWords","negativeWords","buttons","button","round","App","exact","path","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97312059.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mtv_logo_yellow.0c1ce2fe.png\";","module.exports = __webpack_public_path__ + \"static/media/mtv_logo_pink.9ff1150a.png\";","import { combineReducers } from 'redux';\nimport { triviaData } from './triviaDataReducer';\nimport { correctQuestions } from './correctQuestionsReducer';\nimport { incorrectQuestions } from './incorrectQuestionsReducer';\nimport { userName } from './userNameReducer';\nimport { difficulty } from './difficultyReducer';\n\nexport const rootReducer = combineReducers({\n  triviaData,\n  correctQuestions,\n  incorrectQuestions,\n  userName,\n  difficulty\n});\n","export const triviaData = (state = [], action) => {\n  switch(action.type) {\n    case 'GET_TRIVIA_DATA':\n      return [...action.triviaData]\n    default:\n      return state;\n  }\n}\n","export const correctQuestions = (state = [], action) => {\n  switch(action.type) {\n    case 'SAVE_CORRECT_QUESTION':\n      return [...state, action.question]\n    case 'CLEAR_CORRECT_QUESTIONS':\n      return state = []\n    default:\n      return state;\n  }\n}\n","export const incorrectQuestions = (state = [], action) => {\n  switch(action.type) {\n    case 'SAVE_INCORRECT_QUESTION':\n      return [...state, action.question]\n    case 'CLEAR_INCORRECT_QUESTIONS':\n      return state = []\n    default:\n      return state;\n  }\n}\n","export const userName = (state = '', action) => {\n  switch(action.type) {\n    case 'SAVE_USERNAME':\n      return action.name\n    default:\n      return state;\n  }\n}\n","export const difficulty = (state = '', action) => {\n  switch(action.type) {\n    case 'SAVE_DIFFICULTY':\n      return action.difficulty\n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { fetchTriviaData } from '../../apiCalls';\nimport { connect } from 'react-redux';\nimport { saveTriviaData, saveUserName, saveDifficulty, clearCorrectQuestions, clearIncorrectQuestions } from '../../actions';\nimport './Intro.css'\nimport logo from '../../assets/mtv_logo_yellow.png';\nimport PropTypes from 'prop-types';\n\nexport class Intro extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      difficultyDropBox: 'easy',\n      formCompleted: false\n    }\n  }\n\n  startGame = () => {\n    this.props.clearCorrectQuestions();\n    this.props.clearIncorrectQuestions();\n    this.storeUserName(this.state.name);\n    this.storeDifficulty(this.state.difficultyDropBox)\n    this.getTriviaData();\n  }\n\n  getTriviaData = () => {\n    fetchTriviaData(this.state.difficultyDropBox)\n      .then(unstructuredData => this.restructureData(unstructuredData))\n      .then(restructuredData => this.props.saveTriviaDataToStore(restructuredData))\n  }\n\n  createAllAnswers = (correctAnswer, incorrectAnswers) => {\n    let allAnswers = [...incorrectAnswers, correctAnswer]\n    return this.shuffleAnswers(allAnswers)\n  }\n\n  shuffleAnswers = a => {\n    let j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n  }\n\n  restructureData = data => {\n    return data.results.map(q => {\n      let allAnswers = this.createAllAnswers(q.correct_answer, q.incorrect_answers)\n      return {\n        question: this.cleanData(q.question),\n        correct_answer: this.cleanData(q.correct_answer),\n        incorrect_answers: q.incorrect_answers,\n        all_answers: allAnswers.map(answer => this.cleanData(answer)),\n        your_answer: null\n      }\n    })\n  }\n\n  cleanData = data => {\n    if (data.includes('&quot;') ||\n        data.includes('&Uuml;') ||\n        data.includes('&#039;') ||\n        data.includes('&amp;')) {\n      data = data.split('&quot;').join('')\n      data = data.split('&#039;').join('')\n      data = data.split('&amp;').join(' ')\n      data = data.split('&Uuml;').join('U')\n      return data\n    } else {\n      return data\n    }\n  }\n\n  storeUserName = name => {\n    this.props.saveUserNameToStore(name);\n  }\n\n  storeDifficulty = difficulty => {\n    this.props.saveDifficultyToStore(difficulty);\n  }\n\n  updateDropBoxState = difficulty => {\n    this.setState({difficultyDropBox: difficulty});\n  }\n\n  updateState = e => {\n    this.setState( {[e.target.name]: e.target.value} );\n  }\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.setState({ formCompleted: true })\n  }\n\n  render() {\n    return (\n      <form id='intro-container' onSubmit={this.onSubmit}>\n        {this.state.formCompleted && <Redirect to={{pathname: '/round'}} />}\n        <img src={ logo } id='large-logo' alt='mtv trivia logo' />\n        <h1 id='trivia-text'>trivia</h1>\n        <h1 id='my-name'>by Zachary Nemeroff</h1>\n        <input\n          required\n          id='name-input'\n          type='text'\n          maxLength='15'\n          placeholder='enter your name...'\n          name='name'\n          value={this.state.name}\n          onChange={this.updateState}\n        />\n        <div id='difficulty-dropbox-container'>\n          <p id='difficulty-text'>difficulty:</p>\n          <select id='difficulty-dropbox' onChange={e => this.updateDropBoxState(e.target.value)}>\n            <option value='easy'>easy</option>\n            <option value='medium'>medium</option>\n            <option value='hard'>hard</option>\n          </select>\n        </div>\n        <button type='submit' id='start-game-button' onClick={this.startGame}>start game</button>\n      </form>\n    )\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => ({\n  saveTriviaDataToStore: triviaData => dispatch(saveTriviaData(triviaData)),\n  saveUserNameToStore: userName => dispatch(saveUserName(userName)),\n  saveDifficultyToStore: difficulty => dispatch(saveDifficulty(difficulty)),\n  clearCorrectQuestions: () => dispatch(clearCorrectQuestions()),\n  clearIncorrectQuestions: () => dispatch(clearIncorrectQuestions())\n})\n\nIntro.propTypes = {\n  name: PropTypes.string,\n  difficultyDropBox: PropTypes.string,\n  formCompleted: PropTypes.bool,\n  startGame: PropTypes.func,\n  getTriviaData: PropTypes.func,\n  createAllAnswers: PropTypes.func,\n  shuffleAnswers: PropTypes.func,\n  restructureData: PropTypes.func,\n  cleanData: PropTypes.func,\n  storeUserName: PropTypes.func,\n  storeDifficulty: PropTypes.func,\n  updateDropBoxState: PropTypes.func,\n  updateState: PropTypes.func,\n  onSubmit: PropTypes.func,\n  saveTriviaDataToStore: PropTypes.func,\n  saveUserNameToStore: PropTypes.func,\n  saveDifficultyToStore: PropTypes.func,\n  clearCorrectQuestions: PropTypes.func,\n  clearIncorrectQuestions: PropTypes.func,\n}\n\nexport default connect(null, mapDispatchToProps)(Intro);\n","export const fetchTriviaData = difficulty => {\n  return fetch(`https://opentdb.com/api.php?amount=10&category=12&difficulty=${difficulty}&type=multiple`)\n  .then(response => {\n    if (!response.ok) {\n      throw Error('200 status code not found: getTriviaData throw error')\n    }\n    return response.json()\n  })\n}\n","export const saveTriviaData = triviaData => ({\n  type: 'GET_TRIVIA_DATA',\n  triviaData\n});\n\nexport const correctQuestions = question => ({\n  type: 'SAVE_CORRECT_QUESTION',\n  question\n});\n\nexport const clearCorrectQuestions = () => ({\n  type: 'CLEAR_CORRECT_QUESTIONS'\n});\n\nexport const incorrectQuestions = question => ({\n  type: 'SAVE_INCORRECT_QUESTION',\n  question\n});\n\nexport const clearIncorrectQuestions = () => ({\n  type: 'CLEAR_INCORRECT_QUESTIONS'\n});\n\nexport const saveUserName = name => ({\n  type: 'SAVE_USERNAME',\n  name\n});\n\nexport const saveDifficulty = difficulty => ({\n  type: 'SAVE_DIFFICULTY',\n  difficulty\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../../assets/mtv_logo_pink.png';\nimport './Header.css';\nimport PropTypes from 'prop-types';\n\nexport const Header = props => {\n    return (\n      <section id='header-container'>\n        <img src={ logo } id='nav-logo' alt='mtv trivia logo'/>\n        <div id='score-container'>\n          <p id='question-tally'>Question {(props.correct.length + props.incorrect.length) + 1 === 11 ? 10 : (props.correct.length + props.incorrect.length) + 1} of 10</p>\n          <p id='score-tally'><span id='correct-answers'> {props.correct.length}✔ </span> <span id='incorrect-answers'> {props.incorrect.length}x</span></p>\n        </div>\n        <div id='difficulty-container'>\n          <p id='difficulty-heading'>Difficulty:</p>\n          <p id='difficulty-rating'>{props.difficulty.toUpperCase()}</p>\n        </div>\n      </section>\n    )\n}\n\nexport const mapStateToProps = (state) => ({\n  difficulty: state.difficulty,\n  correct: state.correctQuestions,\n  incorrect: state.incorrectQuestions\n});\n\nHeader.propTypes = {\n  correct: PropTypes.array,\n  incorrect: PropTypes.array,\n  difficulty: PropTypes.string\n}\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './Result.css';\nimport PropTypes from 'prop-types';\n\nexport const Result = props => {\n    let missedQuestions = props.wrong.map(q => {\n      return (\n        <div key={q.question} className='missed-question-container'>\n          <p className='missed-question-text'>{q.question}</p>\n          <p className='missed-question-text'>your answer: <span className='missed-question-data'>{q.your_answer}</span></p>\n          <p className='missed-question-text'>correct answer: <span className='missed-question-data'>{q.correct_answer}</span></p>\n        </div>\n      )\n    })\n    return (\n      <div className='result-contianer'>\n        <p className='result-text'>way to go <span id='user-input'>{props.username}!</span></p>\n        <p className='result-text'>score: <span id='user-input'>{props.right.length}0%</span></p>\n        <Link to={'/intro'}><button className='new-game-button'>new game</button></Link>\n        <div className='missed-question-outer-container'>\n          {missedQuestions}\n        </div>\n      </div>\n    )\n}\n\nexport const mapStateToProps = (state) => ({\n  username: state.userName,\n  right: state.correctQuestions,\n  wrong: state.incorrectQuestions\n});\n\nResult.propTypes = {\n  username: PropTypes.string,\n  right: PropTypes.array,\n  wrong: PropTypes.array\n}\n\nexport default connect(mapStateToProps)(Result);\n","import React from 'react';\nimport './Response.css';\nimport PropTypes from 'prop-types';\n\nconst Response = props => {\n    return (\n      <div className='response-contianer'>\n        <p className='response-text'>{props.text}</p>\n      </div>\n    )\n}\n\nResponse.propTypes = {\n  text: PropTypes.string,\n}\n\nexport default Response;\n","import React, { Component } from 'react';\nimport Response from '../../Components/Response/Response';\nimport { Redirect } from 'react-router-dom';\nimport { correctQuestions, incorrectQuestions } from '../../actions';\nimport { connect } from 'react-redux';\nimport './Round.css';\nimport PropTypes from 'prop-types';\n\nexport class Round extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedAnswer: null,\n      errorMessage: '',\n      rightORwrong: null,\n      counter: 0\n    }\n  }\n\n  updateSelectedAnswer = answer => {\n    this.setState({selectedAnswer: answer })\n  }\n\n  submitAnswer = () => {\n    if (!this.state.selectedAnswer) {\n      this.setState({errorMessage: 'You Must Select an Answer!'})\n    } else if (this.state.selectedAnswer === this.props.triviaData[this.state.counter].correct_answer) {\n      this.props.addToCorrectQuestions(this.props.triviaData[this.state.counter])\n      this.setState({rightORwrong: true})\n      this.resetForNextRound();\n    } else {\n      this.props.triviaData[this.state.counter].your_answer = this.state.selectedAnswer\n      this.props.addToIncorrectQuestions(this.props.triviaData[this.state.counter])\n      this.setState({rightORwrong: false})\n      this.resetForNextRound();\n    }\n  }\n\n  resetForNextRound = () => {\n    setTimeout(() => this.setState({counter: this.state.counter+1, rightORwrong: null, selectedAnswer: null, errorMessage: ''}), 800);\n  }\n\n  displayRightOrWrong = rightORwrong => {\n    if (rightORwrong) {\n      return <Response text={this.positiveWords()}/>\n    } else {\n      return <Response text={this.negativeWords()}/>\n    }\n  }\n\n  positiveWords = () => {\n    let words = ['RAD!', 'RIGHT ON!', 'COWABUNGA!', 'GNARLY!', 'BODACIOUS!', 'TOTALLY!', 'TUBULAR!', 'SUPER FLY!', 'SWEET!', 'DOPE!']\n    let randomNum = Math.floor(Math.random() * 10)\n    return words[randomNum]\n  }\n\n  negativeWords = () => {\n    let words = ['bummer...', 'lame...', 'no dice...', 'what a drag...', 'barf...', 'bogus...']\n    let randomNum = Math.floor(Math.random() * 6)\n    return words[randomNum]\n  }\n\n  render() {\n\n    if (this.state.counter > 9) {\n      return <Redirect to='/result' />\n    }\n\n    if (!this.props.triviaData.length) {\n        return <Response text='loading...'/>\n\n    } else if (this.state.rightORwrong === null) {\n\n      let buttons = this.props.triviaData[this.state.counter].all_answers.map(button => {\n        return <button onClick={e => this.updateSelectedAnswer(e.target.value)} value={button} key={button} className={button === this.state.selectedAnswer ? 'answer-button active-button' : 'answer-button'}>{button}</button>\n      })\n\n      return (\n        <div className='round'>\n          <div className='question-container'>\n            <p className='question-text'>{this.props.triviaData[this.state.counter].question}</p>\n          </div>\n          {buttons}\n          <p className='round-error-message'>{this.state.errorMessage}</p>\n          <button className='submit-answer-button' onClick={this.submitAnswer}>submit answer</button>\n        </div>\n      )\n    } else if (this.state.rightORwrong !== null) {\n      return this.displayRightOrWrong(this.state.rightORwrong)\n    }\n  }\n}\n\nexport const mapStateToProps = (state) => ({\n  triviaData: state.triviaData,\n});\n\nexport const mapDispatchToProps = (dispatch) => ({\n  addToCorrectQuestions: round => dispatch(correctQuestions(round)),\n  addToIncorrectQuestions: round => dispatch(incorrectQuestions(round))\n})\n\nRound.propTypes = {\n  selectedAnswer: PropTypes.string,\n  errorMessage: PropTypes.string,\n  rightORwrong: PropTypes.bool,\n  counter: PropTypes.number,\n  updateSelectedAnswer: PropTypes.func,\n  submitAnswer: PropTypes.func,\n  triviaData: PropTypes.array,\n  resetForNextRound: PropTypes.func,\n  displayRightOrWrong: PropTypes.func,\n  addToCorrectQuestions: PropTypes.func,\n  addToIncorrectQuestions: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round);\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Intro from '../../Containers/Intro/Intro';\nimport Header from '../../Containers/Header/Header';\nimport Result from '../../Containers/Result/Result';\nimport Round from '../../Containers/Round/Round';\nimport './App.css';\n\nexport const App = () => {\n  return (\n    <div id='outer-div'>\n      <section id='game-container'>\n        <Switch>\n          <Route exact path='/'>\n            <Intro />\n          </Route>\n          <Route exact path='/round'>\n            <Header />\n            <Round/>\n          </Route>\n          <Route exact path='/result'>\n            <Header />\n            <Result />\n          </Route>\n          <Redirect to='/'/>\n        </Switch>\n      </section>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers/index';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n\n<Provider store={store}>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n</Provider>\n\n  ,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}